#version 450

layout (binding = 0, rgba32f) uniform image2D destTex;
layout (local_size_x = 16, local_size_y = 16) in;

uniform vec4 imageSize;

float focal_length = 1.0;

vec3 ray_origin = vec3(0.0, 0.0, 0.0);
vec4 sphere = vec4(0.0, 0.0, -1.0, 0.5);

struct Ray
{
    vec3 orig;
    vec3 dir;
} ray;

vec4 ray_color(Ray r);
bool hit_sphere(vec4 s, Ray r);

void main()
{
    // Image space calculation
    vec2 screenCoords = gl_GlobalInvocationID.xy;
    screenCoords.y = imageSize.y - gl_GlobalInvocationID.y;
    vec2 uv = vec2(screenCoords) / imageSize.xy;
    
    // Basic variables
    float aspect_raito = imageSize.x / imageSize.y;
    float viewport_height = 2.0;
    float viewport_width = aspect_raito * viewport_height;
    
    vec3 horizontal = vec3(viewport_width, 0, 0);
    vec3 vertical = vec3(0, viewport_height, 0);
    vec3 lower_left_corner = ray_origin - horizontal / 2 - vertical / 2 - vec3(0, 0, focal_length);
    
    ray = Ray(ray_origin, lower_left_corner + horizontal * uv.x + vertical * uv.y - ray_origin);
    

        
    
    vec4 color = ray_color(ray);
    
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    imageStore(destTex, storePos, color);
    //imageStore(destTex, storePos, vec4(c, 0.0, 1.0));
}

vec4 ray_color(Ray r)
{
    if(hit_sphere(sphere, r)) return vec4(0.5, 0.0, 0.0, 1.0);

    vec3 runitdir = normalize(r.dir);
    float t = 0.5*(runitdir.y + 1.0); 
    
    vec4 color = mix( vec4(1.0, 1.0, 1.0, 1.0), vec4(0.5, 0.7, 1.0, 1.0), t);
    return color;
}


bool hit_sphere(vec4 s, Ray r)
{
    vec3 oc = r.orig - s.xyz;
    float a = dot(r.dir, r.dir);
    float b = 2.0 * dot(r.dir, oc);
    float c = dot(oc, oc) - s.w * s.w;
    float discremenant = b*b - 4*a*c;
    
    return discremenant > 0;
}