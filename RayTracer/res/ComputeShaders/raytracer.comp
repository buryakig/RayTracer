#version 450

layout (binding = 0, rgba32f) uniform image2D destTex;
layout (local_size_x = 16, local_size_y = 16) in;

uniform vec4 imageSize;

// Materials
#define LAMBERTIAN_MAT 0
#define REFLECTIVE_MAT 1


#define PI 3.14159265359
#define FOCAL_LENGTH 1.0
#define NUM_SPHERES 4
#define CAST_DEPTH 128
#define MAX_ITERATIONS 128


struct Ray
{
    vec3 orig;
    vec3 dir;
} ;//ray;

struct hit_info {
    vec3 p;
    vec3 normal;
    float t;
    bool front_face;
    int material;
    vec4 albedo;
    float roughness;
};

struct Sphere
{
    vec4 geom;
    int material;
    vec4 albedo;
    float roughness;
};

const Sphere spheres[NUM_SPHERES] = {
       Sphere(vec4(0.0, 0.0, -1.0, 0.5), LAMBERTIAN_MAT, vec4(0.7, 0.3, 0.3, 1.0), 0.0),
       Sphere(vec4(-1.0, 0.0, -1.0, 0.5), REFLECTIVE_MAT, vec4(0.8, 0.8, 0.8, 1.0), 0.0),
       Sphere(vec4(1.0, 0.0, -1.0, 0.5), REFLECTIVE_MAT, vec4(0.8, 0.6, 0.2, 1.0), 0.7),
       Sphere(vec4(0.0, -100.5, -1.0, 100.0), LAMBERTIAN_MAT, vec4(0.8, 0.8, 0.5, 1.0), 0.0)
    };

const float infinity = 1.0/0.0;         // OpenGL > 4.1
const float aspect_raito = imageSize.x / imageSize.y;
const float viewport_height = 2.0;
const float viewport_width = aspect_raito * viewport_height;
    
const vec3 horizontal = vec3(viewport_width, 0, 0);
const vec3 vertical = vec3(0, viewport_height, 0);

const vec3 ray_origin = vec3(0.0, 0.0, 0.0);

uint seed = 123456;


// Utility Functions
float degrees_to_radians(float degrees);

// Random
uint hash( uint x );
uint hash( uvec2 v );
uint hash( uvec3 v );
uint hash( uvec4 v );

float floatConstruct( uint m );

float random( uint x );
float random( float x );
float random( vec2  v );
float random( vec3  v );
float random( vec4  v );

vec3 random_on_unit_sphere();
vec3 random_on_unit_sphere(vec2 vec_seed);
vec3 random_on_unit_sphere(vec3 vec_seed);

// Traicing functions
vec4 ray_color(Ray r, int depth);
vec3 ray_point(Ray r, float t);
Ray get_ray(vec2 uv);

void material_scatter(hit_info hit, inout Ray scatter_ray);
void lambertian_scatter(hit_info hit, out Ray scatter_ray);
void reflective_scatter(hit_info hit, inout Ray scatter_ray);

bool hit_sphere(Sphere s, Ray r, out hit_info hit, float t_min = 0.001, float t_max = 10000.0);
bool hit_world(Sphere s[NUM_SPHERES], Ray r, out hit_info hit, float t_min = 0.0, float t_max = 10000.0);

void main()
{
    // Image space calculation
    vec2 screenCoords = gl_GlobalInvocationID.xy;
    screenCoords.y = imageSize.y - gl_GlobalInvocationID.y;
    vec2 uv = vec2(screenCoords) / imageSize.xy;
    
    // Basic variables

    vec4 color = vec4(0.0);
    Ray ray;
    for(int i = 0; i < MAX_ITERATIONS; ++i)
    { 
        vec2 ray_uv = uv + vec2(random(gl_GlobalInvocationID.x + i), random(i + gl_GlobalInvocationID.y))/ imageSize.xy; 
        ray = get_ray(ray_uv);
        color += ray_color(ray, CAST_DEPTH);
    }
    color /= MAX_ITERATIONS;

    color = sqrt(color);
    
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    imageStore(destTex, storePos, color);
    //imageStore(destTex, storePos, vec4(c, 0.0, 1.0));
}

vec4 trace(Ray r, int depth)
{
    

    return vec4(0.0);
}

vec4 ray_color(Ray r, int depth)
{
    hit_info hit;

    vec4 color = vec4(1.0, 1.0, 1.0, 1.0);

    for(int i = 0; i < depth; ++i)
    {
        if(hit_world(spheres, r,  hit)) 
        {
            material_scatter(hit, r);
            color.rgb *=  hit.albedo.rgb;
        }
        else
        {
            vec3 runitdir = normalize(r.dir);
            float t = 0.5*(runitdir.y + 1.0); 
    
            vec4 bckgrnd_color = mix( vec4(1.0, 1.0, 1.0, 1.0), vec4(0.5, 0.7, 1.0, 1.0), t);
            return color * bckgrnd_color;
        }
     }
     return vec4(0.0, 0.0, 0.0, 1.0);
}

bool hit_world(Sphere s[NUM_SPHERES], Ray r, out hit_info hit, float t_min = 0.0, float t_max = 10000.0)
{
    bool hit_anything = false;
    float closest_to_camera = t_max;

    for(int i = 0; i < NUM_SPHERES; ++i)
    {
        if(hit_sphere(s[i], r, hit, t_min, closest_to_camera))
        {
            hit_anything = true;
            closest_to_camera = hit.t;
        }
    }

    return hit_anything;
}


bool hit_sphere(Sphere s, Ray r, out hit_info hit, float t_min = 0.0, float t_max = 10000.0)
{
    vec3 oc = r.orig - s.geom.xyz;
    float a = dot(r.dir, r.dir);
    float half_b = dot(r.dir, oc);
    float c = dot(oc, oc) - s.geom.w * s.geom.w;
    float half_discr = half_b*half_b - a*c;
    
    if (half_discr < 0) return false;
    
    float t = (-half_b - sqrt(half_discr)) / a;
    if(t < t_min || t > t_max)   return false;

    hit.t = t;
    hit.p = r.orig + normalize(r.dir) * hit.t;
    vec3 normal = normalize(hit.p - s.geom.xyz);
    hit.front_face = dot(normalize(r.dir), normal) <= 0;

    hit.normal = hit.front_face ? normal : -normal;
    hit.material = s.material;
    hit.albedo = s.albedo;
    hit.roughness = s.roughness;

    return true;
}

void material_scatter(hit_info hit, inout Ray scatter_ray)
{
    if(hit.material == LAMBERTIAN_MAT)
        lambertian_scatter(hit, scatter_ray);
    else if(hit.material == REFLECTIVE_MAT)
        reflective_scatter(hit, scatter_ray);
}

void lambertian_scatter(hit_info hit, out Ray scatter_ray)
{ 
    vec3 scattered_ray_dir = hit.normal + random_on_unit_sphere(hit.p);
    scatter_ray = Ray(hit.p, scattered_ray_dir);
}

void reflective_scatter(hit_info hit, inout Ray scatter_ray)
{ 
    vec3 scattered_ray_dir = reflect(normalize(scatter_ray.dir), hit.normal);
    scattered_ray_dir += random_on_unit_sphere(hit.p) * hit.roughness * random(hit.p);

    scatter_ray = Ray(hit.p, scattered_ray_dir);
}

vec3 ray_point(Ray r, float t)
{
    return r.orig + r.dir * t; 
}

// Utility Functions
float degrees_to_radians(float degrees)
{
    return degrees * PI / 180.0;
}

Ray get_ray(vec2 uv)
{
    vec3 lower_left_corner = ray_origin - horizontal / 2.0 - vertical / 2.0 - vec3(0.0, 0.0, FOCAL_LENGTH);
    return Ray(ray_origin, lower_left_corner + horizontal * uv.x + vertical * uv.y - ray_origin);
}


// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}


// Pseudo-random value in half-open range [0:1].
float random( uint x ) { return floatConstruct(hash(x)); }
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

// Random point on sphere with radius 1
vec3 random_on_unit_sphere()
{
    float phi = random(seed++) * PI;
    float theta = random(seed++) * 2 * PI;

    return vec3(sin(theta) * cos(phi), 
                sin(theta) * sin(phi), 
                cos(theta));
}

vec3 random_on_unit_sphere(vec3 vec_seed)
{
    float phi = random(vec_seed + vec3(444.4444, 123.321, 8875.543234)) * 2 * PI;
    float theta = random(vec_seed ) * PI;

    return vec3(sin(theta) * cos(phi), 
                sin(theta) * sin(phi), 
                cos(theta));
}

vec3 random_on_unit_sphere(vec2 vec_seed)
{
    float phi = random(vec_seed) * 2 * PI;
    float theta = random(vec_seed + vec2(444.4444, 123.321)) * PI;

    return vec3(sin(theta) * cos(phi), 
                sin(theta) * sin(phi), 
                cos(theta));
}